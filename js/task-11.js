// "Анаграмма
// Так называют слово, которое содержит все буквы другого слова в том же количестве, но ином порядке.
// Постановка
// Нужно написать функцию, которая проверяет, являются ли две строки анаграммами, 
// причем регистр букв не имеет значения. Учитываются лишь символы; 
// пробелы или знаки препинания в расчет не берутся."											

const simpleWords = ['loli',  'little'];

const includeLetters =  (words, letterToCompare) => {



    
    // const mapped = words.map(word => word.indexOf('l', 'i', 'o') === letterToCompare.indexOf('l', 'i', 'o'))
    //     if (mapped){
    //           return true;
    //         }else {
    //           return false
    //         }



//     const mapped = words.map(word => word[0] === letterToCompare[0] && word[1] === letterToCompare[1] 
//         && word[2] === letterToCompare[2] && word[3] === letterToCompare[3] )
// if (mapped){
//       return true;
//     }else {
//       return false
//     }
    
}
console.log(includeLetters (simpleWords, 'lilo'));

// "Палиндром
// Палиндром — слово, предложение или последовательность символов,
//  которая абсолютно одинаково читается как в привычном направлении, так и в обратном. 
//  К примеру, “Anna” — это палиндром, а “table” и “John” — нет.
// Постановка
// Дана строка; нужно написать функцию, которая позволяет вернуть значение true, 
// если строка является палиндромом, и false — если нет. 
// При этом нужно учитывать пробелы и знаки препинания."






// "Поиск гласных
// Достаточно простая задача, которая часто попадается на собеседованиях.
// Постановка
// Нужно написать функцию, принимающую строку в качестве аргумента и возвращающую количество гласных, 
// которые содержатся в строке.
// Гласными являются «a», «e», «i», «o», «u»."											







// "Фибоначчи
// Классическая задача, которую можно встретить на собеседованиях самого разного уровня. 
// Стоит напомнить, что последовательность Фибоначчи — это ряд чисел, 
// где каждое последующее является суммой двух предыдущих. 
// Так, первые десять чисел выглядят следующим образом: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.
// Постановка
// Нужно написать функцию, которая возвращает n-ную запись в определенной последовательности,
//  причем n — число, которое передается в качестве аргумента функции."											
											
											
// "Есть ферма животных, у всех животных есть имена и возраст. 
// Животные бывают разных типов: Кошки, Собаки, Коровы. 
// У каждого животного могут быть дети. 
// Если животное является родителем этих детей, 
// в свою очередь глубина семейного древа может достигать N либо 0.

// Опишите структуры данных для фермы животных и напишите функцию, 
// которая делает подсчёт всех возрастов животных и выводит общий возраст для всей фермы."											
											
											
// "const arr = [10, 12, 15, 21];
// for (var i = 0; i < arr.length; i++) {
//   setTimeout(function() {
//     console.log('The index of this number is: ' + i);
//   }, 3000);
// }"	



// Дана строка. Определите общее количество символов '+' и '-' в ней. 
// А так же сколько таких символов, после которых следует цифра ноль(уникальных).											
// Создайте структуру (class) с именем train, содержащую поля: 
// название пункта назначения, номер поезда, время отправления. 
// Ввести данные в массив из пяти элементов типа train, 
// упорядочить элементы по номерам поездов. 
// Добавить возможность вывода информации о поезде, номер которого введен пользователем. 
// Добавить возможность сортировки массив по пункту назначения, 
// причем поезда с одинаковыми пунктами назначения должны быть упорядочены по времени отправления.											
											
											
// Заполните массив случайным образом нулями, единицами и двойками так, 
// чтобы первая двойка в массиве встречалась раньше первой единицы, 
// количество единиц было в точности равно суммарному количеству нулей и двоек.



											
// Поменять местами наибольший и наименьший элементы массива.											